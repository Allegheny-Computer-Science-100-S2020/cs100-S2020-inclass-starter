// available commands:
// "gradle grade": run GatorGrader to assess completion of learning objectives
// "gradle check": run checkstyle to assess code quality
// "gradle clean": clean the project of all derived files
// "gradle build": create the bytecode from the source code
// "gradle run": run the program and produce output

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    mavenLocal()
    dependencies {
      // other option, only needed for specifying a specific version of the Gradle plugin:
      // classpath "gradle.plugin.org.gatored:gatorgradle:0.4.4"
      classpath "gradle.plugin.org.gatored:gatorgradle:+"
    }
  }
}

// apply the version of the gradle plugin
apply plugin: 'java'
apply plugin: 'org.gatored.gatorgradle'

// declare the repositories that are used to meet dependencies
repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
}

// specify the use of the gradle version
wrapper {
  gradleVersion = '4.9'
}

// declare values to place in the manifest file in the JAR
jar {
  manifest {
    attributes(
        'Class-Path': configurations.compileClasspath.collect { it.getName() }.join(' '),
        'Main-Class': 'labone.DisplayOutput'
        )
  }
}

// run: runExploreDataTypes
task(runExploreDataTypes, dependsOn: 'classes', type: JavaExec) {
    description = 'Run the inclass.ExploreDataTypes program'
    main = 'inclass.ExploreDataTypes'
    classpath = sourceSets.main.runtimeClasspath
}

// run: runComputeGasMileage
task(runComputeGasMileage, dependsOn: 'classes', type: JavaExec) {
    description = 'Run the inclass.ComputeGasMileage program'
    main = 'inclass.ComputeGasMileage'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

// run: runPerformStringMutation
task(runPerformStringMutation, dependsOn: 'classes', type: JavaExec) {
    description = 'Run the inclass.PerformStringMutation program'
    main = 'inclass.PerformStringMutation'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

// run: runCompareInputValues
task(runCompareInputValues, dependsOn: 'classes', type: JavaExec) {
    description = 'Run the inclass.CompareInputValues program'
    main = 'inclass.CompareInputValues'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

// run: runComputeAverage
task(runComputeAverage, dependsOn: 'classes', type: JavaExec) {
    description = 'Run the inclass.ComputeAverage program'
    main = 'inclass.ComputeAverage'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

// run: runComputeMultiples
task(runComputeMultiples, dependsOn: 'classes', type: JavaExec) {
    description = 'Run the inclass.ComputeMultiples program'
    main = 'inclass.ComputeMultiples'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

// run: runDisplayStars
task(runDisplayStars, dependsOn: 'classes', type: JavaExec) {
    description = 'Run the inclass.DisplayStars program'
    main = 'inclass.DisplayStars'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

// run: runBasicArrayComputations
task(runBasicArrayComputations, dependsOn: 'classes', type: JavaExec) {
    description = 'Run the inclass.BasicArrayComputations program'
    main = 'inclass.BasicArrayComputations'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

// run: runReverseNumberList
task(runReverseNumberList, dependsOn: 'classes', type: JavaExec) {
    description = 'Run the inclass.ReverseNumberList program'
    main = 'inclass.ReverseNumberList'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

// perform checkstyle checking with the "gradle check" command
apply plugin: 'checkstyle'
checkstyle.toolVersion = '8.1'
checkstyle {
  ignoreFailures = false
  maxWarnings = 0
  maxErrors = 0
  configFile = new File(rootDir, "config/checkstyle/google_checks.xml")
}
